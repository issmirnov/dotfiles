# To edit previous commit message
git commit --amend

# To stage last commit
git reset HEAD~ 

# To remove untracked files
git clean -f -d

# To remove untracked and ignored files
git clean -f -d -x

# To make an exisiting branch track a remote branch
git branch -u upstream/foo

# To see who commited which line in a file
git blame filename

# Import commits from another repo
git --git-dir=../some_other_repo/.git format-patch -k -1 --stdout <commit SHA> | git am -3 -k

# View commits that will be pushed
git log @{u}..

# View changes that are new on a feature branch
git log -p feature --not master
git diff master...feature

# Interactive rebase for the last 7 commits
git rebase -i @~7

# To pull changes while overwriting any local commits
git fetch --all
git reset --hard origin/master

# Perform a shallow clone to only get latest commits
# (helps save data when cloning large repos)
git clone --depth 1 <remote-url>

# To unshallow a clone
git pull --unshallow

# Create a bare branch (one that has no commits on it)
git checkout --orphan branch_name

# Remove all stale branches (ones that have been deleted on remote)
# So if you have a lot of useless branches, delete them on Github and then run this
git remote prune origin

# The following can be used to prune all remotes at once
git remote prune $(git remote | tr '\n' ' ')

# Revisions can also be identified with :/text
# So, this will show the first commit that has "cool" in their message body
git show :/cool

# Undo parts of last commit in a specific file
git checkout -p HEAD^ -- /path/to/file

# Reset git repo into one commit
git reset $(git commit-tree HEAD^{tree} -m "message here")

# merge changes from other branch
git merge -X theirs branchB

# to squash the last two commits into one
git rebase -i HEAD~2

# To save a patch
git diff > name.patch

# apply patch
git apply name.patch

# delete a tag
git push --delete origin tagName
git tag -d tagName
